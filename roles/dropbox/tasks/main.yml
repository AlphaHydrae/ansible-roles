- name: Check whether environment directory already exists
  shell: test -L "{{ user_home }}/.env.d" && echo 'yes' || echo 'no'
  register: environment_directory_link
  changed_when: environment_directory_link.stdout.find('yes') == -1
- name: Link environment directory
  command: su - {{ user }} -c "cd && ln -s {{ user_home }}/Safebox/Config/.env.d {{ user_home }}/.env.d"
  when: environment_directory_link|changed
- name: Check whether Archives directory already exists
  shell: test -L "{{ user_home }}/Archives" && echo 'yes' || echo 'no'
  register: archives_directory_link
  changed_when: archives_directory_link.stdout.find('yes') == -1
- name: Link Archives directory
  command: su - {{ user }} -c "cd && ln -s {{ user_home }}/Safebox/Archives {{ user_home }}/Archives"
  when: archives_directory_link|changed
- name: Link Desktop to Dropbox
  file: path="{{ user_home }}/Dropbox/Desktop/{{ host_human_name }}" src="{{ user_home }}/Desktop" state=link
- name: Check whether Music directory is linked
  shell: test -L "{{ user_home }}/Music" && echo 'yes' || echo 'no'
  register: music_link
  changed_when: music_link.stdout.find('yes') == -1
- name: Archive Music directory
  command: mv "{{ user_home }}/Music" "{{ mac_installation_target }}/Original Music" creates="{{ mac_installation_target }}/Original Music"
  when: music_link|changed
- name: Link Music directory
  file: path="{{ user_home }}/Music" src="{{ user_home }}/Dropbox/Music" state=link
- name: Check whether Pictures directory is linked
  shell: test -L "{{ user_home }}/Pictures" && echo 'yes' || echo 'no'
  register: pictures_link
  changed_when: pictures_link.stdout.find('yes') == -1
- name: Archive Pictures directory
  command: mv "{{ user_home }}/Pictures" "{{ mac_installation_target }}/Original Pictures" creates="{{ mac_installation_target }}/Original Pictures"
  when: pictures_link|changed
- name: Link Pictures directory
  file: path="{{ user_home }}/Pictures" src="{{ user_home }}/Dropbox/Pictures" state=link
- name: Make Applications directory
  file: path="{{ user_home }}/Applications" group={{ group }} owner={{ user }} state=directory
- name: Check whether IM application already exists
  shell: test -e "{{ user_home }}/Applications/IM.app" && echo 'yes' || echo 'no'
  register: im_app_link
  changed_when: im_app_link.stdout.find('yes') == -1
- name: Link IM application
  command: su - {{ user }} -c "cd && cp -R {{ user_home }}/Safebox/Automator/IM.app {{ user_home }}/Applications"
  when: im_app_link|changed
