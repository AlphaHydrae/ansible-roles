upstream {{ NGINX_UNICORN_APP.name }}_unicorn_cluster {
  server unix:{{ NGINX_UNICORN_APP.socket }};
}

server {
  listen 80;
  server_name {% for server_name in NGINX_UNICORN_APP.server_names %} {{ server_name }}{% endfor %};
  return 302 https://$server_name$request_uri;
}

server {
  listen 443; ssl on;
  ssl_certificate /web/certificates/{{ NGINX_UNICORN_APP.domain }}/server.crt;
  ssl_certificate_key /web/certificates/{{ NGINX_UNICORN_APP.domain }}/server.key;

  server_name{% for server_name in NGINX_UNICORN_APP.server_names %} {{ server_name }}{% endfor %};
  root {{ NGINX_UNICORN_APP.path }}/public;

  location / {
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header Host $http_host;
    proxy_redirect off;

    # Set maintenance mode if maintenance directory exists...
    if (-d $document_root/maintenance) {
      set $maintenance 1;
    }
    # but serve everything under the public maintenance directory.
    if ($uri ~ ^/maintenance/) {
      set $maintenance 0;
    }
    # If maintenance mode is set, serve the maintenance page.
    if ($maintenance) {
      rewrite (.*) /maintenance/maintenance.html last;
    }

    # Serve cached index if it exists.
    if (-f cache/$request_filename/index.html) {
      rewrite (.*) $1/index.html break;
    }
    # Serve cached page if it exists.
    if (-f cache/$request_filename.html) {
      rewrite (.*) $1.html break;
    }

    # Pass request to unicorn.
    if (!-f $request_filename) {
      proxy_pass http://{{ NGINX_UNICORN_APP.name }}_unicorn_cluster;
      break;
    }
  }
}
